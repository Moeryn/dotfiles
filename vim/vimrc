" .vimrc
" Author: Caneill Pierre-Yves <pyc@moeryn.com>

set nocompatible

filetype plugin on
filetype plugin indent on

" {{{ Plugins

call plug#begin('~/.vim/bundle')

if has("nvim")
   Plug 'benekastah/neomake'
   Plug 'kassio/neoterm'
   Plug 'equalsraf/neovim-gui-shim'
endif

Plug 'kien/ctrlp.vim'
Plug 'vim-airline/vim-airline'
Plug 'ervandew/supertab'
Plug 'editorconfig/editorconfig-vim'
Plug 'jlanzarotta/bufexplorer'
Plug 'Raimondi/delimitMate'
Plug 'mileszs/ack.vim'

" GIT
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'

" GO
Plug 'fatih/vim-go'

" Python
Plug 'vim-python/python-syntax'

" Utils
Plug 'vim-scripts/genutils'

" Theme
Plug 'junegunn/seoul256.vim'
Plug 'sjl/badwolf'

call plug#end()



" }}}
" {{{ Basic options
" {{{ Cursor line

set cursorline
hi CursorLine term=bold cterm=bold ctermbg=black

augroup cline
    au!
    au WinLeave,InsertEnter * set nocursorline
    au WinEnter,InsertLeave * set cursorline
augroup END

" }}}
"  {{{ Wildmenu completion

set wildmenu
set wildmode=list:longest,full

set wildignore+=.hg,.git,.svn                    " Version control
set wildignore+=*.aux,*.out,*.toc                " LaTeX intermediate files
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg   " binary images
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.sw?                            " Vim swap files
set wildignore+=*.luac                           " Lua byte code
set wildignore+=*.pyc                            " Python byte code
set wildignore+=*.orig                           " Merge resolution files

" }}}
" {{{ Restore cursor position

au BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

" }}}

set encoding=utf-8
set backspace=indent,eol,start

set ttimeout
set ttimeoutlen=0

set incsearch
set hlsearch

set autoindent    " take indent from new line from previous line
set autowrite     " write when switching buffer

set noswapfile    " disable swapfile usage
set noerrorbells  " no bells
set novisualbell  " no bells
set title         " let vim set the terminal title

set hidden
set splitbelow
set splitright
set showbreak=

" list
set listchars=eol:¬,tab:➤\ ,trail:-,extends:>,precedes:<,nbsp:¤
set list


" modeline
set modeline
set modelines=5

set lazyredraw
set undolevels=1000   " increase number of undos possible
set ttyfast           " fast terminal
set showmatch         " show matching bracket
set report=0          " report the number of lines changed
set laststatus=2      " always have a status line
set foldmethod=marker " folding => {{{ }}}
set wildmenu
set tags=tags;/,.tags;/,TAG;/

" Don't try to highlight lines longer than 800 characters.
set synmaxcol=800

set complete=.,w,b,u,i,t

"undo settings
set undodir=~/.vim/undofiles
set undofile
set colorcolumn=+1 "mark the ideal max text width

" Enable color in the terminal for the powerline in some terminal
set t_Co=256

" }}}
" {{{ Plugins
" {{{ ctrlp

"let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files && git submodule -q foreach ''for file in $(git ls-files); do echo $name/$file; done''']

" The Silver Searcher
if executable('ag')
  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

" }}}
" {{{ Neomake

if has("nvim")
  " Open the quickfix, but leave the cursor
  let g:neomake_open_list = 2

  " Makers are run one after the other
  let g:neomake_serialize = 0
  let g:neomake_serialize_abort_on_error = 1

  let g:neomake_error_sign   = {'text': '✖', 'texthl': 'NeomakeErrorSign'}
  let g:neomake_warning_sign = {'text': '∆', 'texthl': 'NeomakeWarningSign'}
  let g:neomake_message_sign = {'text': '➤', 'texthl': 'NeomakeMessageSign'}
  let g:neomake_info_sign    = {'text': 'ℹ', 'texthl': 'NeomakeInfoSign'}
  let g:neomake_go_enabled_makers = [ 'go', 'gometalinter' ]
endif

" }}}
" {{{ Terminal & Neoterm

if has("nvim")
    " escape
    tnoremap <esc> <C-\><C-n>

    " move from terminal to other pane
    tnoremap <C-h> <C-\><C-n><C-w>h
    tnoremap <C-j> <C-\><C-n><C-w>j
    tnoremap <C-k> <C-\><C-n><C-w>k
    tnoremap <C-l> <C-\><C-n><C-w>l

    " always be in insert mode when entering terminal
    autocmd BufWinEnter,WinEnter term://* startinsert

    " always leave insert mode when leaving terminal
    autocmd BufLeave term://* stopinsert

    " Neoterm

    let g:neoterm_default_mod = 'vertical'
    let g:neoterm_automap_keys = ',tt'

    " Useful maps
    " hide/close all terminals
    nnoremap <silent> ,th :call neoterm#close_all()<cr>
    " clear terminal
    nnoremap <silent> ,tl :call neoterm#clear()<cr>
    " kills the current job (send a <c-c>)
    nnoremap <silent> ,tc :call neoterm#kill()<cr>

    " Git commands
    command! -nargs=+ Tg :T git <args>
endif

" }}}
" {{{ gitgutter

let g:gitgutter_realtime = 1

" }}}
" {{{ Ag
"
" The Silver Searcher
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
  set grepprg=ag\ --nogroup\ --nocolor
endif


" }}}
" {{{ delimitMate

let delimitMate_expand_cr=1

" }}}
" }}}
" {{{ Functions

let g:current_theme = "seoul256"
function! SwitchTheme()
    if g:current_theme ==? "seoul256"
        colo seoul256-light
        let g:current_theme = "seoul256-light"
        return
    endif
    if g:current_theme ==? "seoul256-light"
        colo badwolf
        let g:current_theme = "badwolf"
        return
    endif
    if g:current_theme ==? "badwolf"
        colo seoul256
        let g:current_theme = "seoul256"
        return
    endif
endfunction

" }}}
" {{{ Mapping Programming Languages
" {{{ General

set expandtab
set shiftwidth=2
set softtabstop=2
set tabstop=2
set textwidth=0

set cinoptions=
set cinoptions+=N-s         " No namespace indentation
set cinoptions+=L0.5s       " align labels at 0.5 shiftwidth
set cinoptions+=:0.5s,=0.5s " same for case labels and code following labels
set cinoptions+=g0.5s,h0.5s " same for C++ stuff
set cinoptions+=t0          " type on the line before the function is not indented
set cinoptions+=(0,Ws       " indent in functions ( ... ) when it breaks
set cinoptions+=m1          " align the closing ) properly
set cinoptions+=j1,J1       " java/javascript -> fixes blocks

" Doxygen
au! Syntax {cpp,c,d,javascript}
au Syntax {cpp,c,d,javascript} runtime syntax/doxygen.vim

" }}}
" {{{ Golang

au FileType go nnoremap <leader>gd :GoDoc<cr>
au FileType go nnoremap <leader>gdb :GoDocBrowser<cr>
au FileType go nnoremap <leader>grt :GoTestFunc<cr>
au FileType go nnoremap <leader>gt :GoTest<cr>
au FileType go nnoremap <leader>gj :GoAddTags<cr>
au FileType go nnoremap <leader>gf :GoFillStruct<cr>
au FileType go noremap <F2> :GoDef GoToDefinition<cr>
au FileType go noremap <C-F2> :GoReferrers<cr>

au FileType go set noexpandtab
au FileType go set shiftwidth=2
au FileType go set softtabstop=2
au FileType go set tabstop=2

let g:go_highlight_build_constraints = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_operators = 1
let g:go_highlight_structs = 1
let g:go_highlight_types = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_function_arguments = 1
let g:go_highlight_variable_assignments = 1
let g:go_highlight_variable_declarations = 1

" Deactivate 'K' mapping
let g:go_doc_keywordprg_enabled = 0 

let g:go_auto_sameids = 1
let g:go_auto_type_info = 1
let g:go_addtags_transform = "snakecase"
let g:go_term_enabled = 1
let g:go_term_mode = "vsplit"

if has("nvim")
  autocmd BufWritePost *.go Neomake
  let g:neomake_go_enabled_makers = ['go']
  "let g:neomake_go_enabled_makers = ['go', 'gometalinter']
  let g:neomake_go_gometalinter_maker = {
    \ 'args': [
    \   '--tests',
    \   '--enable-gc',
    \   '--concurrency=1',
    \   '--fast',
    \   '%:p:h',
    \ ],
    \ 'append_file': 0,
    \ 'errorformat':
    \   '%E%f:%l:%c:%trror: %m,' .
    \   '%W%f:%l:%c:%tarning: %m,' .
    \   '%E%f:%l::%trror: %m,' .
    \   '%W%f:%l::%tarning: %m'
    \ }
endif


" }}}
" {{{ CPP
"
let g:clang_format#detect_style_file = 1
autocmd FileType c,cpp,objc nnoremap <buffer><Leader>cf :<C-u>ClangFormat<cr>zo
autocmd FileType c,cpp,objc vnoremap <buffer><Leader>cf :ClangFormat<cr>zo

let g:cpp_class_scope_highlight = 1
let g:cpp_experimental_template_highlight = 1


au FileType cpp,c,objc noremap <F2> :YcmCompleter GoToDefinition<cr>
au FileType cpp,c,objc nnoremap <leader>ci :YcmCompleter GoToInclude<cr>
au FileType cpp,c,objc nnoremap <leader>cd :YcmCompleter GoToDeclaration<cr>
au FileType cpp,c,objc nnoremap <leader>ct :YcmCompleter GoTo<cr>
au FileType cpp,c,objc nnoremap <leader>cgt :YcmCompleter GetType<cr>
au FileType cpp,c,objc nnoremap <leader>cgp :YcmCompleter GetParent<cr>
au FileType cpp,c,objc nnoremap <leader>cf :YcmCompleter FixIt<cr>:ll<cr>
au FileType cpp,c,objc nnoremap <leader>ct :Neomake clangtidy<cr>
au FileType cpp,c,objc nnoremap <leader>cn :Neomake clangcheck<cr>

if has('nvim')
    let g:neomake_cpp_enabled_makers = ['clangcheck', 'clangtidy']
    let g:neomake_cpp_clangcheck_args=['-p', '/home/caneill/dev/house/.build/normal', '-extra-arg=-fno-color-diagnostics', '-extra-arg=-fdiagnostics-format=clang', '-extra-arg=-fno-caret-diagnostics',  '-extra-arg=-fshow-source-location']
    let g:neomake_cpp_clangtidy_args=['-p', '/home/caneill/dev/house/.build/normal', '-extra-arg=-fno-color-diagnostics', '-extra-arg=-fdiagnostics-format=clang', '-extra-arg=-fno-caret-diagnostics',  '-extra-arg=-fshow-source-location']
endif

" }}}
" {{{ Python

if has("nvim")
  let g:neomake_python_enable_makers = ['pylint']
  autocmd BufWritePost *.py :Neomake pylint
endif

let g:python_highlight_all = 1
let g:python_highlight_indent_errors = 1

" }}}
" }}}
" {{{ Mapping

let mapleader = ","

" {{{ Fonction Keys

" Open BufferExplorer
map <F3> <leader>be

" Grep (using ag, the_silver_search) on the current word
noremap <C-F4> :Ack <cword><cr>

" Git-Grep on the current word, and fill quickfix
noremap <F4> :Ggrep! -w <cword><cr><cr>

" Switch to paste mode
set pastetoggle=<F5>

" Switch between themes
nnoremap <F6> :exec("call SwitchTheme()")<cr>

" Spell check
noremap <F8> :setlocal spell! spelllang=en_us<cr>

" Horizontal split + next buffer
noremap <F9> :split<cr>:bn<cr>
" Vertical split + next buffer
noremap <F10> :vsplit<cr>:bn<cr>

" Remove trailing spaces
noremap <F12> mcHmh:%s/ \+$//ge<cr>'hzt`c

" }}}
" {{{ Normal

" next quickfix
noremap +        :cnext<cr>
noremap <kPlus>  :cnext<cr>

" previous quickfix
noremap -        :cprev<cr>
noremap <kMinus> :cprev<cr>

" next loclist (YcmDiags, neomake)
noremap <leader>n :lnext<cr>
" previous loclist (YcmDiags, neomake)
noremap <leader>b :lprev<cr>

" Change directory to the file being edited
nnoremap ,cd :cd %:p:h<cr>

" Move to the begining of line
noremap H ^

" Move to the end of the line
noremap L $

" Move to left buffer
noremap  <C-h>      <C-w><Left>
noremap! <C-h>      <Esc> <C-w><Left>

" Move to right buffer
noremap  <C-l>      <C-w><Right>
noremap! <C-l>      <Esc> <C-w><Right>

" Move to buffer above
noremap  <C-Up>     <C-w><Up>
noremap! <C-Up>     <Esc> <C-w><Up>
noremap  <C-k>      <C-w><Up>
noremap! <C-k>      <Esc> <C-w><Up>

" Move to buffer below
noremap  <C-Down>   <C-w><Down>
noremap! <C-Down>   <Esc> <C-w><Down>
noremap  <C-j>      <C-w><Down>
noremap! <C-j>      <Esc> <C-w><Down>

" Scroll up
noremap <S-Up> <C-Y>

" Scroll down
noremap <S-Down> <C-E>

" Resize windows
noremap <C-A-h> :exec("5winc >")<cr>
noremap! <C-A-h> <Esc>:exec("5winc >")<cr>
noremap <C-A-g> :exec("5winc <")<cr>
noremap! <C-A-g> <Esc>:exec("5winc <")<cr>
noremap <C-Up> :exec("5winc -")<cr>
noremap <C-Down> :exec("5winc +")<cr>

" Move current line up
noremap <leader>- ddp

" Move current line down
noremap <leader>_ ddkP

" Open vimrc / nvimrc and source it
nnoremap <leader>ev :vsplit $HOME/CONFIG/vim/vimrc<cr>
nnoremap <leader>env :vsplit $HOME/CONFIG/vim/nvimrc<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>

" Add semicolumn at the end of the line
nnoremap <leader>; :exec("normal! mqA;\<lt>esc>`q")<cr>

" Close buffer
nnoremap K :q!<cr>
nnoremap :q<cr> :call input("use `K` instead")<cr>

" Save buffer
nnoremap s :w<cr>
nnoremap :w<cr> :call input("use `s` instead")<cr>

" Toggle line numbers
nnoremap <leader>l :setlocal number!<cr>

" Select a block and sort it
nnoremap <leader>s vip:!sort<cr>

" Reselect last-pasted text
nnoremap gp `[v`]

" Recenter cursor
nnoremap <c-s> mzzMzvzz15<c-e>`z:Pulse<cr>

" }}}
" {{{ Interactive

" forbid non-breakable spaces
inoremap   <Space>

" Uppercase last word
inoremap <C-u> <esc>vbU<esc>ea

" Surround last word with quotes
inoremap <leader>" <esc>viw<esc>a"<esc>hbi"<esc>lela

" Exit insert mode
inoremap jk <esc>

" }}}
" {{{ Visual

" Surround selected text with quotes
vnoremap <leader>" <esc>`<i"<esc>`>a"<esc>l

" }}}
" {{{ Operator-Pendig Mapping

" inside parens
onoremap p i(
onoremap np :<c-u>normal! f(vi(<cr>i
onoremap pp :<c-u>normal! F)vi(<cr>i
onoremap n" :<c-u>normal! f"vi"<cr>i

" }}}
" }}}
" {{{ Next and Last
"
" Author: Steve Losh <steve@stevelosh.com>
" Source: http://bitbucket.org/sjl/dotfiles/src/tip/vim/
"
" Motion for "next/last object".  "Last" here means "previous", not "final".
" Unfortunately the "p" motion was already taken for paragraphs.
"
" Next acts on the next object of the given type, last acts on the previous
" object of the given type.  These don't necessarily have to be in the current
" line.
"
" Currently works for (, [, {, and their shortcuts b, r, B.
"
" Next kind of works for ' and " as long as there are no escaped versions of
" them in the string (TODO: fix that).  Last is currently broken for quotes
" (TODO: fix that).
"
" Some examples (C marks cursor positions, V means visually selected):
"
" din'  -> delete in next single quotes                foo = bar('spam')
"                                                      C
"                                                      foo = bar('')
"                                                                C
"
" canb  -> change around next parens                   foo = bar('spam')
"                                                      C
"                                                      foo = bar
"                                                               C
"
" vin"  -> select inside next double quotes            print "hello ", name
"                                                       C
"                                                      print "hello ", name
"                                                             VVVVVV

onoremap an :<c-u>call <SID>NextTextObject('a', '/')<cr>
xnoremap an :<c-u>call <SID>NextTextObject('a', '/')<cr>
onoremap in :<c-u>call <SID>NextTextObject('i', '/')<cr>
xnoremap in :<c-u>call <SID>NextTextObject('i', '/')<cr>

onoremap al :<c-u>call <SID>NextTextObject('a', '?')<cr>
xnoremap al :<c-u>call <SID>NextTextObject('a', '?')<cr>
onoremap il :<c-u>call <SID>NextTextObject('i', '?')<cr>
xnoremap il :<c-u>call <SID>NextTextObject('i', '?')<cr>


function! s:NextTextObject(motion, dir)
    let c = nr2char(getchar())
    let d = ''

    if c ==# "b" || c ==# "(" || c ==# ")"
        let c = "("
    elseif c ==# "B" || c ==# "{" || c ==# "}"
        let c = "{"
    elseif c ==# "r" || c ==# "[" || c ==# "]"
        let c = "["
    elseif c ==# "'"
        let c = "'"
    elseif c ==# '"'
        let c = '"'
    else
        return
    endif

    " Find the next opening-whatever.
    execute "normal! " . a:dir . c . "\<cr>"

    if a:motion ==# 'a'
        " If we're doing an 'around' method, we just need to select around it
        " and we can bail out to Vim.
        execute "normal! va" . c
    else
        " Otherwise we're looking at an 'inside' motion.  Unfortunately these
        " get tricky when you're dealing with an empty set of delimiters because
        " Vim does the wrong thing when you say vi(.

        let open = ''
        let close = ''

        if c ==# "("
            let open = "("
            let close = ")"
        elseif c ==# "{"
            let open = "{"
            let close = "}"
        elseif c ==# "["
            let open = "\\["
            let close = "\\]"
        elseif c ==# "'"
            let open = "'"
            let close = "'"
        elseif c ==# '"'
            let open = '"'
            let close = '"'
        endif

        " We'll start at the current delimiter.
        let start_pos = getpos('.')
        let start_l = start_pos[1]
        let start_c = start_pos[2]

        " Then we'll find it's matching end delimiter.
        if c ==# "'" || c ==# '"'
            " searchpairpos() doesn't work for quotes, because fuck me.
            let end_pos = searchpos(open)
        else
            let end_pos = searchpairpos(open, '', close)
        endif

        let end_l = end_pos[0]
        let end_c = end_pos[1]

        call setpos('.', start_pos)

        if start_l == end_l && start_c == (end_c - 1)
            " We're in an empty set of delimiters.  We'll append an "x"
            " character and select that so most Vim commands will do something
            " sane.  v is gonna be weird, and so is y.  Oh well.
            execute "normal! ax\<esc>\<left>"
            execute "normal! vi" . c
        elseif start_l == end_l && start_c == (end_c - 2)
            " We're on a set of delimiters that contain a single, non-newline
            " character.  We can just select that and we're done.
            execute "normal! vi" . c
        else
            " Otherwise these delimiters contain something.  But we're still not
            " sure Vim's gonna work, because if they contain nothing but
            " newlines Vim still does the wrong thing.  So we'll manually select
            " the guts ourselves.
            let whichwrap = &whichwrap
            set whichwrap+=h,l

            execute "normal! va" . c . "hol"

            let &whichwrap = whichwrap
        endif
    endif
endfunction

" }}}
" {{{ Color scheme

syntax on
set background=dark

hi Comment      cterm=none       ctermfg=blue       ctermbg=none
hi doxygenBrief cterm=none       ctermfg=cyan       ctermbg=none
hi Folded       cterm=none       ctermfg=brown      ctermbg=none

hi Visual       cterm=reverse    ctermfg=none       ctermbg=none
hi IncSearch    cterm=none       ctermfg=red        ctermbg=none
hi Search       cterm=underline  ctermfg=red        ctermbg=none

hi StatusLine   cterm=none       ctermfg=white      ctermbg=blue
hi StatusLineNc cterm=none       ctermfg=black      ctermbg=white
hi WildMenu     cterm=none       ctermfg=white      ctermbg=none
hi VertSplit    cterm=none       ctermfg=darkgray   ctermbg=none
hi NonText      cterm=none       ctermfg=darkgray   ctermbg=none

hi MatchParen   cterm=underline  ctermfg=white      ctermbg=red
hi Pmenu        cterm=none       ctermfg=gray       ctermbg=black
hi PmenuSel     cterm=none       ctermfg=black      ctermbg=gray
hi PmenuSbar    cterm=none       ctermfg=blue       ctermbg=blue
hi PmenuThumb   cterm=none       ctermfg=gray       ctermbg=gray

hi SpellBad     cterm=underline  ctermfg=lightred   ctermbg=none
hi SpellCap     cterm=none       ctermfg=lightred   ctermbg=none
hi SpellLocal   cterm=underline  ctermfg=darkgreen  ctermbg=none
hi SpellRare    cterm=none       ctermfg=none       ctermbg=none

hi javaScriptTpl       cterm=none ctermfg=darkgreen ctermbg=none
hi javaScriptTplMark   cterm=none ctermfg=magenta ctermbg=none

" Reload the colorscheme whenever we write the file.
" augroup color_badwolf_dev
"     au!
"     au BufWritePost badwolf.vim color badwolf
" augroup END

" Highlight VCS conflict markers
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'

"colo badwolf
"colo seoul256

set background=dark
colorscheme badwolf

" Override the search highlight color with a combination that is easier to
" read. The default PaperColor is dark green backgroun with black foreground.
"
" Reference:
" - http://vim.wikia.com/wiki/Xterm256_color_names_for_console_Vim
highlight Search guibg=DeepPink4 guifg=White ctermbg=53 ctermfg=White

" }}}
